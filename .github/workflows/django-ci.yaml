name: Django CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: 3.12
      CONTAINER_NAME: "my-django-app"
      CONTAINER_VERSION: "latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # - name: Setup python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}
      # - name: Install Dependency
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      # - name: Run migrations
      #   run: |
      #     python manage.py migrate
      # - name: Run tests
      #   run: |
      #     python manage.py test

      # - name: Docker build
      #   uses: docker/setup-buildx-action@v3
      
      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{env.CONTAINER_NAME}}:${{env.CONTAINER_VERSION}} .
        
      # - name: Run django commands inside docker
      #   run: |
      #     docker run --rm -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
      #        ${{env.CONTAINER_NAME}}:${{env.CONTAINER_VERSION}} \
      #        python manage.py migrate
      #     docker run --rm -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
      #       ${{env.CONTAINER_NAME}}:${{env.CONTAINER_VERSION}} \
      #       python manage.py test

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: "SSH: Create .env File"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << EOF
            echo "${{ secrets.ENV_FILE_CONTENT }}" > /home/ubuntu/django-test/.env
          EOF

      # Build the image with a temporary tag (safe)
      - name: "SSH: Build Docker Image (temporary)"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << EOF
            cd /home/ubuntu/django-test
            docker build --no-cache -t django-app:new .
          EOF

      # Optional: Run test inside new container
      - name: "SSH: Test new image (optional)"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << EOF
            docker run --rm --env-file /home/ubuntu/django-test/.env django-app:new python manage.py check
          EOF

      # If the above passes, stop old and switch to new
      - name: "SSH: Stop and Remove Old Container"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << EOF
            docker stop django-app || true
            docker rm django-app || true
          EOF

      - name: "SSH: Tag new image as latest"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} \
            "docker tag django-app:new django-app:latest"

      - name: "SSH: Run Docker Container"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << EOF
            docker run -d --name django-app -p 80:8000 \
              --env-file /home/ubuntu/django-test/.env \
              django-app:latest
          EOF
